using System; // System 네임스페이스 안에 있는 클래스를 사용하겠다고 컴파일러에게 알리는 역할
using static System.Console; // using static은 어떤 데이터 형식의 정적 멤버를 데이터 형식의 이름을 명시하지 않고 참조하겠다고 선언하는 기능

namespace ch_02_01 // 네임스페이스는 성격이나 하는 일이 비슷한 클래스, 구조체, 인터페이스, 대리자, 열거 형식 등을 하나의 이름 아래 묶는 일을 한다. // 클래스, 구조체, 인터페이스 등...
    // 다른 네임스페이스에서 MainApp 클래스를 사용하려면 using Hello; 문장을 이용해서 Hello 네임스페이스를 참조하거나, Hello.MainApp처럼 클래스가 소속되어 있는 네임스페이스와 클래스의 이름을 붙여줘야 한다.
{
    class MainApp // C# 프로그램을 구성하는 기본 단위로서 데이터와 데이터를 처리하는 기능(메소드)으로 이루어진다.
    {
        // 프로그램 실행이 시작되는 곳 
        static void Main(string[] args) // Main() 메소드, 프로그램의 진입점, 프로그램을 시작하면 실행되고, 메소드가 종료되면 프로그램도 역시 종료된다. 
            // Static은 한정자로서 메소드나 변수 등을 수식한다. C# 프로그램의 각 요소는 코드가 실행되는 시점에 비로소 메모리에 할당되는 반면, static 키워드로 수식되는 코드는 프로그램이 처음 구동될 때부터 진작에 메모리에 할당된다는 특징이 있다.
            // 한정자 : 다른 요소들을 꾸며주는 역할을 한다고 이해하면 된다.
            // void : 메소드의 반환 형식
            // string[] args : 메소드의 입력되는 매개변수
        {
            if (args.Length == 0) // 매개변수 목록의 길이가 0일 때, 안내문을 출력하고 프로그램을 종료시킨다.
            {
                Console.WriteLine("사용법 : Hello.exe <이름>");
                return; // 메소드의 호출자에게 메소드 실행 결과를 돌려주는 역할
            }

            WriteLine("Hello, {0}!", args[0]); // 프롬프트에 출력
        }
    }
}

//사용법: Hello.exe<이름>
